import topology.metric_space.basic
import .for_mathlib

open set

lemma Inf.closure (I : set ℝ) (h1 : ∃ a, a ∈ I) (h2 : ∃ (x : ℝ), ∀ (y : ℝ), y ∈ I → x ≤ y) : Inf I ∈ closure I :=
begin
  intros F hF,
  by_contradiction hhF, 
  obtain ⟨ε, hε, H⟩  := metric.is_open_iff.1 (is_open_compl_iff.2 hF.1) (Inf I) (by exact mem_compl hhF),
  have hIε : ∀ x ∈ I, Inf I + ε/2 ≤ x,
  { intros x hx,
    cases le_or_lt (Inf I + ε / 2) x,
    { exact h },
    { cases le_or_lt (Inf I - ε / 2) x,
      exfalso,
      { have hxB : x ∈ metric.ball (Inf I) ε,
        { rw [metric.mem_ball',real.dist_eq],
          exact abs_lt.2 ⟨by linarith, by linarith⟩ },
        exact (H hxB) (hF.2 hx) },
      { linarith [(real.is_glb_Inf I ⟨x, hx⟩ h2).1 hx] } } },
  obtain ⟨a, ⟨ha1,ha2⟩⟩ := real.lt_Inf_add_pos h1 (half_pos hε),
  linarith [hIε a ha1],
end

lemma bolz (a b : ℝ) (hab : a < b) (f: ℝ → ℝ) (hf : continuous_on f (Icc a b)) (ha : (f a)<0 ∧ (f b)>0) : ∃ c ∈ (Icc a b),f(c)=0 :=
begin
  let I := {x ∈ Icc a b | f x ≥ 0},
  have h1 : ∃ (x : ℝ), x ∈ I, by exact ⟨b, right_mem_Icc.2 (le_of_lt hab), ge_iff_le.1 (le_of_lt ha.2)⟩,
  have hIb : bdd_below I := ⟨a, λ _ h, h.1.1⟩,
  have hb : Inf I ≤ b,
  {
    rw real.Inf_le_iff,
    { intros ε hε,
      use b,
      split,
      { simp only [mem_sep_eq, ge_iff_le, right_mem_Icc],
        split; linarith },
      exact lt_add_of_pos_right b hε },
    { exact ⟨a, (λ y hy, (mem_Icc.1 hy.1).1)⟩ },
    { exact nonempty_def.mpr h1 }
  },
  cases ha with ha1 ha2,
  have hIIci : I = f⁻¹'(Ici 0) ∩ (Icc a b), by exact subset.antisymm (λ x hx, ⟨hx.2, hx.1⟩) (λ x hx, ⟨hx.2, hx.1⟩),
  have hII : is_closed I,
  { obtain ⟨U, hU⟩ := continuous_on_iff_is_closed.1 hf (Ici 0) (is_closed_Ici) ,
    rw [hIIci, hU.2],
    exact is_closed.inter hU.1 (is_closed_Icc),
    },
  have himI : 0 ≤ f (Inf I),
  { obtain hx := Inf.closure I h1 ⟨a, (λ y hy, (mem_Icc.1 hy.1).1)⟩,
    rw (is_closed.closure_eq hII) at hx,
    exact hx.2 },
  have ha : a < Inf {x ∈ Icc a b | f x ≥ 0},
  { have h3 : a ≠ Inf I,
    { intro hax,
      have htt : f (Inf I) <0, by rwa ← hax,
      linarith },
    apply (ne.le_iff_lt h3).mp,
    have halb : lower_bounds I a,
    { unfold lower_bounds,
      simp only [and_imp, mem_sep_eq, ge_iff_le, mem_set_of_eq, mem_Icc],
      exact λ t ht1 ht2 hh, ht1 },
    exact (le_cInf_iff ⟨a, halb⟩ h1).2 halb },
  have hI : Inf I ∈ Icc a b := mem_Icc.mpr ⟨le_of_lt ha, hb⟩,
  have hf : f (Inf {x ∈ Icc a b | f x ≥ 0}) = 0,
  { by_contradiction,
    cases (ne.symm h).lt_or_lt,
    { obtain ⟨δ₀, hδ₀ , hh⟩  := metric.continuous_on_iff.1 hf (Inf I) hI ((f (Inf I))/2) (half_pos h_1),
      let δ := min δ₀ ((Inf I)-a),
      have hδ : δ > 0,
      { exact lt_min hδ₀ (by linarith) },
      have hhδ : ∀ (a_1 : ℝ), a_1 ∈ Icc a b → dist a_1 (Inf I) < δ → dist (f a_1) (f (Inf I)) < f (Inf I) / 2,
      { intros x hx hxd,
        exact hh x hx (by linarith[min_le_left δ₀ (Inf I - a)]) },
      have t : Inf I - δ/2 ∈ Icc a b,
      { exact (mem_Icc.mpr ⟨by linarith [min_le_right δ₀ ((Inf I)-a)], by linarith⟩) },
      have tt : dist (Inf I - δ/2) (Inf I) < δ,
      { have m : abs(Inf I - δ/2 - Inf I) = δ/2,
        { ring_nf,
          rw abs_neg,
          exact abs_of_pos (by linarith) },
        rw [real.dist_eq (Inf I - δ/2) (Inf I), m],
        linarith },
      obtain hhh := (hhδ (Inf I - δ/2) t tt),
      have r : 0 < f (Inf I - δ/2),
      { rw real.dist_eq at hhh,
        linarith[neg_lt_of_abs_lt hhh] },
      have HH : Inf I ≤ Inf I - δ / 2,
      {
        have hkey : Inf I - δ/2 ∈ I := ⟨t, ge_iff_le.1 (le_of_lt r)⟩,
        apply (real.is_glb_Inf I ⟨Inf I - δ/2, hkey⟩ hIb).1 hkey,
      },
      linarith [HH] },
    { linarith[himI] } },
  exact ⟨Inf {x ∈ (Icc a b)| f x >= 0}, hI, hf⟩,
end

theorem bolzano (a b : ℝ) (hab : a < b) (f: ℝ → ℝ) (hf : continuous_on f (Icc a b)) (ha : (f a)*(f b)<0) : ∃ c ∈ (Icc a b), f(c)=0 :=
begin
  cases (mul_neg_iff.1 ha),
  { let g := λ (α : ℝ ), -α, 
    obtain ⟨c, H, hc⟩  := bolz a b hab (g ∘ f) (continuous_on.neg hf) ⟨neg_lt_zero.mpr h.1, neg_pos.mpr h.2⟩,
    exact ⟨c, H, neg_eq_zero.1 hc⟩ },
  { exact bolz a b hab f hf h }
end